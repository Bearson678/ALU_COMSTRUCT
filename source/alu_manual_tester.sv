/*
    This file was generated automatically by Alchitry Labs 2.0.28-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alu_manual_tester #(
        parameter CLK_FREQ = 30'h3b9aca00
    ) (
        input wire clk,
        input wire rst,
        input wire [4:0] io_button,
        input wire [2:0][7:0] io_dip,
        output reg [2:0][7:0] io_led,
        output reg [7:0] io_segment,
        output reg [3:0] io_select,
        output reg [7:0] led
    );
    localparam E_States_IDLE = 3'h0;
    localparam E_States_STORE16AFIRST = 3'h1;
    localparam E_States_STORE16ALAST = 3'h2;
    localparam E_States_STORE16BFIRST = 3'h3;
    localparam E_States_STORE16BLAST = 3'h4;
    localparam E_States_SETALU = 3'h5;
    localparam E_States_DISPLAY = 3'h6;
    localparam CLK_FREQONE = 30'h3b9aca00;
    logic [31:0] M_alu_a;
    logic [31:0] M_alu_b;
    logic [5:0] M_alu_alufn;
    logic [31:0] M_alu_out;
    logic M_alu_z;
    logic M_alu_v;
    logic M_alu_n;
    
    alu alu (
        .a(M_alu_a),
        .b(M_alu_b),
        .alufn(M_alu_alufn),
        .out(M_alu_out),
        .z(M_alu_z),
        .v(M_alu_v),
        .n(M_alu_n)
    );
    
    
    localparam logic [4:0][0:0] _MP_RISE_1497623571 = {{1'h1, 1'h1, 1'h1, 1'h1, 1'h1}};
    localparam logic [4:0][0:0] _MP_FALL_1497623571 = {{1'h1, 1'h1, 1'h1, 1'h1, 1'h1}};
    logic [4:0] M_io_button_edge_in;
    logic [4:0] M_io_button_edge_out;
    
    genvar idx_0_1497623571;
    
    generate
        for (idx_0_1497623571 = 0; idx_0_1497623571 < 5; idx_0_1497623571 = idx_0_1497623571 + 1) begin: forLoop_idx_0_1497623571
            edge_detector #(
                .RISE(_MP_RISE_1497623571[idx_0_1497623571]),
                .FALL(_MP_FALL_1497623571[idx_0_1497623571])
            ) io_button_edge (
                .clk(clk),
                .in(M_io_button_edge_in[idx_0_1497623571]),
                .out(M_io_button_edge_out[idx_0_1497623571])
            );
        end
    endgenerate
    
    
    localparam logic [4:0][29:0] _MP_CLK_FREQ_521510260 = {{30'h3b9aca00, 30'h3b9aca00, 30'h3b9aca00, 30'h3b9aca00, 30'h3b9aca00}};
    localparam _MP_MIN_DELAY_521510260 = 5'h14;
    localparam _MP_NUM_SYNC_521510260 = 2'h2;
    logic [4:0] M_io_button_cond_in;
    logic [4:0] M_io_button_cond_out;
    
    genvar idx_0_521510260;
    
    generate
        for (idx_0_521510260 = 0; idx_0_521510260 < 5; idx_0_521510260 = idx_0_521510260 + 1) begin: forLoop_idx_0_521510260
            button_conditioner #(
                .CLK_FREQ(_MP_CLK_FREQ_521510260[idx_0_521510260]),
                .MIN_DELAY(_MP_MIN_DELAY_521510260),
                .NUM_SYNC(_MP_NUM_SYNC_521510260)
            ) io_button_cond (
                .clk(clk),
                .in(M_io_button_cond_in[idx_0_521510260]),
                .out(M_io_button_cond_out[idx_0_521510260])
            );
        end
    endgenerate
    
    
    logic [2:0] D_states_d, D_states_q = 3'h0;
    logic [15:0] D_afirsthalf_d, D_afirsthalf_q = 0;
    logic [15:0] D_asecondthalf_d, D_asecondthalf_q = 0;
    logic [15:0] D_bfirsthalf_d, D_bfirsthalf_q = 0;
    logic [15:0] D_bsecondhalf_d, D_bsecondhalf_q = 0;
    logic [5:0] D_alufn_d, D_alufn_q = 0;
    logic [31:0] D_result_d, D_result_q = 32'h0;
    always @* begin
        D_afirsthalf_d = D_afirsthalf_q;
        D_asecondthalf_d = D_asecondthalf_q;
        D_bfirsthalf_d = D_bfirsthalf_q;
        D_bsecondhalf_d = D_bsecondhalf_q;
        D_alufn_d = D_alufn_q;
        D_result_d = D_result_q;
        D_states_d = D_states_q;
        
        M_alu_a = {D_afirsthalf_q, D_asecondthalf_q};
        M_alu_b = {D_bfirsthalf_q, D_bsecondhalf_q};
        M_alu_alufn = D_alufn_q;
        io_led = {D_result_q[5'h1f:5'h18], D_result_q[5'h17:5'h10], D_result_q[3'h7:1'h0]};
        io_segment = 1'h0;
        io_select = 4'hf;
        led = {5'h0, M_alu_z, M_alu_v, M_alu_n};
        D_afirsthalf_d = D_afirsthalf_q;
        D_asecondthalf_d = D_asecondthalf_q;
        D_bfirsthalf_d = D_bfirsthalf_q;
        D_bsecondhalf_d = D_bsecondhalf_q;
        D_alufn_d = D_alufn_q;
        D_result_d = D_result_q;
        D_states_d = D_states_q;
        M_io_button_cond_in = io_button[3'h4:1'h0];
        M_io_button_edge_in = M_io_button_cond_out;
        
        case (D_states_q)
            3'h0: begin
                if (M_io_button_edge_out[1'h0]) begin
                    D_states_d = 3'h1;
                end else begin
                    if (M_io_button_edge_out[1'h1]) begin
                        D_states_d = 3'h2;
                    end else begin
                        if (M_io_button_edge_out[2'h2]) begin
                            D_states_d = 3'h3;
                        end else begin
                            if (M_io_button_edge_out[3'h4]) begin
                                D_states_d = 3'h4;
                            end else begin
                                if (M_io_button_edge_out[2'h3]) begin
                                    D_states_d = 3'h5;
                                end
                            end
                        end
                    end
                end
            end
            3'h1: begin
                D_afirsthalf_d = {io_dip[1'h1], io_dip[1'h0]};
                D_result_d = {io_dip[1'h1], io_dip[1'h0]};
                D_states_d = 3'h0;
            end
            3'h2: begin
                D_asecondthalf_d = {io_dip[1'h1], io_dip[1'h0]};
                D_result_d = {D_afirsthalf_q, io_dip[1'h1], io_dip[1'h0]};
                D_states_d = 3'h0;
            end
            3'h3: begin
                D_bfirsthalf_d = {io_dip[1'h1], io_dip[1'h0]};
                D_result_d = {io_dip[1'h1], io_dip[1'h0]};
                D_states_d = 3'h0;
            end
            3'h4: begin
                D_bsecondhalf_d = {io_dip[1'h1], io_dip[1'h0]};
                D_result_d = {D_bfirsthalf_q, io_dip[1'h1], io_dip[1'h0]};
                D_states_d = 3'h0;
            end
            3'h5: begin
                D_alufn_d = io_dip[2'h2][3'h5:1'h0];
                D_states_d = 3'h6;
            end
            3'h6: begin
                D_result_d = M_alu_out;
                D_states_d = 3'h0;
            end
        endcase
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_states_q <= 3'h0;
            D_afirsthalf_q <= 0;
            D_asecondthalf_q <= 0;
            D_bfirsthalf_q <= 0;
            D_bsecondhalf_q <= 0;
            D_alufn_q <= 0;
            D_result_q <= 32'h0;
        end else begin
            D_states_q <= D_states_d;
            D_afirsthalf_q <= D_afirsthalf_d;
            D_asecondthalf_q <= D_asecondthalf_d;
            D_bfirsthalf_q <= D_bfirsthalf_d;
            D_bsecondhalf_q <= D_bsecondhalf_d;
            D_alufn_q <= D_alufn_d;
            D_result_q <= D_result_d;
        end
    end
endmodule